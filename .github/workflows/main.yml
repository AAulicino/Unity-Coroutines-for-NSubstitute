name: Tests

on:
  push:
    branches: ["main", "develop"]
  pull_request:
  workflow_dispatch:

env:
  UNITY_MANIFEST: Packages/${{ github.event.repository.name }}/package.json
  PACKAGE_CONTENTS: ${{ github.event.repository.name }}
  SCRIPTS_DIR: .github/scripts

jobs:
  build:
    name: Build Package
    runs-on: ubuntu-latest
    outputs:
      package-name: ${{ steps.package-name.outputs.PACKAGE_NAME }}
      artifact-name: ${{ steps.artifact-name.outputs.ARTIFACT_NAME }}
    steps:
      - uses: actions/checkout@v3
      - run: npm pack
      - id: package-name
        name: Get Package Name
        run: >
          echo "::set-output name=PACKAGE_NAME::
          $(cat package.json | grep -m 1 -oE '"name":\s*"([^"]*)' | awk -F '"' '{print $4}')"
      - id: artifact-name
        name: Get Artifact Name
        run: echo "::set-output name=ARTIFACT_NAME::$(echo *.tgz)"
      - uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: ./*.tgz
          retention-days: 1

  create-unity-project:
    name: Create Unity Project
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: build-artifact
      - run: mkdir $PACKAGE_CONTENTS
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - run: $SCRIPTS_DIR/create_unity_manifest.py ${{ needs.build.outputs.package-name }} ${{ needs.build.outputs.artifact-name }}
      - uses: actions/upload-artifact@v3
        with:
          name: unity-project
          path: |
            Packages
            ${{ needs.build.outputs.artifact-name }}
          retention-days: 1

  get-unity-version:
    name: Get Unity Version
    runs-on: ubuntu-latest
    container:
      image: unityci/hub:latest
    outputs:
      unity-version: ${{ steps.get-unity-version.outputs.UNITY_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - id: get-unity-version
        run: echo "::set-output name=UNITY_VERSION::$(unity-hub editors --releases | grep $(cat package.json | grep -oE '"unity":\s*"([^"]*)' | awk -F '"' '{print $4}'))"

  edit-mode-tests:
    name: Edit Mode Tests
    runs-on: ubuntu-latest
    needs:
      - build
      - create-unity-project
      - get-unity-version
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: unity-project
      - uses: actions/cache@v3
        with:
          path: Library/
          key: unity-ci-cache
      - run: mkdir Assets
      - uses: game-ci/unity-test-runner@v2
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: editmode
          unityVersion: ${{ needs.get-unity-version.outputs.unity-version }}
          coverageOptions: "generateAdditionalMetrics;generateHtmlReport;generateHtmlReportHistory;generateBadgeReport;assemblyFilters:+<project>;pathFilters:+**/Packages/${{ needs.build.outputs.package-name }}*/**"
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test results
          path: ${{ steps.tests.outputs.artifactsPath }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Coverage results for edit mode
          path: ${{ steps.tests.outputs.coveragePath }}
