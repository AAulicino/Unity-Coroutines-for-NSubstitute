name: CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
  workflow_dispatch:

env:
  PACKAGE_MANIFEST: Packages/${{ github.event.repository.name }}/package.json

jobs:
  create-unity-project:
    name: Create Unity Project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - run: |
          mkdir Assets
          mkdir Packages
          echo $(python3 ./scripts/setup_unity_manifest.py $PACKAGE_MANIFEST) >>Packages/manifest.json
  get-unity-version:
    name: Get Unity Version
    runs-on: ubuntu-latest
    steps:
      - uses: docker:unityci/hub@latest
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - run: |
          PACKAGE_MIN_VERSION=$(cat $PACKAGE_MANIFEST | grep -oE '"unity":\s*"([^"]*)' | awk -F '"' '{print $4}')
          UNITY_VERSION=$(python3 ./scripts/get_unity_version.py)
          echo "Unity Version: $UNITY_VERSION"
          echo UNITY_VERSION=$(unity-hub editors --releases | grep $PACKAGE_MIN_VERSION) >>prepare.env
    outputs:
      unity-version: UNITY_VERSION
  test:
    name: tests-editmode
    runs-on: ubuntu-latest
    needs:
      - create-unity-project
      - get-unity-version
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: Library/
          key: unity-ci-cache
      - uses: game-ci/unity-test-runner@v2
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: editmode
          unityVersion: ${{ steps.get-unity-version.outputs.unity-version }}
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateHtmlReportHistory;generateBadgeReport'
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test results
          path: ${{ steps.tests.outputs.artifactsPath }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Coverage results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.coveragePath }}
